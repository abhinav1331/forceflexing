// All Mixins here
@mixin box-sizing($type: border-box) {
  box-sizing: $type;
  -webkit-box-sizing: $type;
  -moz-box-sizing: $type;
}
//Add solid border
@mixin add-border($size, $color, $position: all) {

  @if $position == 'top' {
    border-top: $size solid $color;
  }

  @else if $position == 'bottom' {
    border-bottom: $size solid $color;
  }

  @else if $position == 'right' {
    border-right: $size solid $color;
  }

  @else if $position == 'left' {
    border-left: $size solid $color;
  }

  @else if $position == 'top-bottom' {
    border-top: $size solid $color;
    border-bottom: $size solid $color;
  }

  @else if $position == 'right-left' {
    border-left: $size solid $color;
    border-right: $size solid $color;
  }
}
//horizontal center
@mixin margin-auto {
  margin: {
    left: auto;
    right: auto;
  }
}
//Padding mixin
@mixin padding($pading...) {
  padding: $pading;
}
@mixin no-padding {
  padding: 0;
}
//Margin mixin
@mixin margin($margin...) {
  margin: $margin;
}
@mixin no-margin {
  margin: 0;
}
//links
@mixin is_link ($link, $hover, $active: $hover) {
  & {
    color: $link;

    &:hover {
      color: $hover;
    }

    &:active,
    &:focus {
      color: $active;
    }
  }
}
// Border Radius
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  border-radius: $radius;
}
// Box Shadow
@mixin box-shadow($args...) {
  -webkit-box-shadow: $args;
  -moz-box-shadow: $args;
  box-shadow: $args;
}
// Hide from both screenreaders and browsers
@mixin hidden {
  display: none;
  visibility: hidden;
}
@mixin display($state: 'block') {
  display: unquote($state);
  visibility: visible;
}
// Appearance
@mixin appearance ($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}
// Unselectable
@mixin unselectable {
  -webkit-touch-callout: none;
  user-select: none;
}
// Regular transition
@mixin transition($what: all, $time: 0.3s, $how: ease-in-out) {
  -webkit-transition: $what $time $how;
  -moz-transition: $what $time $how;
  -ms-transition: $what $time $how;
  transition: $what $time $how;
}
// generic transform
//For Multiple transform: @include transform(rotate(-20deg) scale(1) skew(-20deg) translate(-40px));
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
   @include transform(rotate(#{$deg}deg));
}
// scale
@mixin scale($scale) {
   @include transform(scale($scale));
}
// translate
@mixin translate ($x, $y:0) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
  -moz-transform-origin: $origin;
  -ms-transform-origin: $origin;
  -webkit-transform-origin: $origin;
  transform-origin: $origin;
}
// Translate 3d
@mixin translate3d($x, $y:0, $z:0) {
  -webkit-transform: translate3d($x, $y, $z);
  -moz-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}
// Cross browser opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}
// Cross browser Placeholders
@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
    @include opacity(1);
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }
}
// Clearfix
@mixin clearfix() {
  &:after,
  &:before {
    content: "";
    display: table;
  }

  &:after {
    clear: both;
  }
}
// Absolute cover
@mixin cover-all {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
}
// Absolute center
@mixin absolutecenter($axis: "both") {
  position: absolute;

  @if $axis == "y" {
    top: 50%;
    @include translate (0, -50%);
  }

  @if $axis == "x" {
    left: 50%;
    @include translate (-50%, 0);
  }

  @if $axis == "both" {
    top: 50%;
    left: 50%;
    @include translate (-50%, -50%);
  }
}
// Calc
@mixin calc($prop, $val) {
   @each $pre in -webkit-, -moz-{
    #{$prop}: $pre + calc(#{$val});
  }
  #{$prop}: calc(#{$val});
}
// Filters
@mixin filter($filter-type,$filter-amount) {
  -webkit-filter: unquote($filter-type+unquote(  '(#{$filter-amount})'));
  -moz-filter: unquote($filter-type+unquote(  '(#{$filter-amount})'));
  -ms-filter: unquote($filter-type+unquote(  '(#{$filter-amount})'));
  filter: unquote($filter-type+unquote(  '(#{$filter-amount})'));
}
// Media queries
@mixin breakpoint($point) {
   @if $point == x-large{
    @media only screen and (min-width:1600px) {
       @content;
    }
  }
  @if $point == large {
     @media only screen and (max-width:1599px){
      @content;
    }
  }
  @if $point == normal {
     @media only screen and (max-width:1199px){
      @content;
    }
  }
  @else if $point == medium {
     @media only screen and (max-width: 991px){
      @content;
    }
  }
  @else if $point == small {
     @media only screen and (max-width: 767px){
      @content;
    }
  }
  @else if $point == x-small {
     @media only screen and (max-width: 479px){
      @content;
    }
  }
}
//Circle
@mixin circle($size) {
  height: $size;
  width: $size;
  @include border-radius(100%);
}
//Aspect Ratio
@mixin aspect-ratio($width, $height) {
  position: relative;

  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .inner-material {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}
//px to em mixin
$base-font-size: 14; // base font size for em to px conversion
@function em($pixels, $context: $base-font-size) {
   @return #{$pixels/$context}em;
}
//custom counter increment
@mixin auto-numbers($numbered-element, $sep, $counter: item, $nested-parent: false ) {
  $sel: ();
  @if $nested-parent {
    $sel: append($sel, unquote($nested-parent));

    #{$nested-parent} {
      list-style: none;
      margin-left: 0;
    }
  }
  $sel: append($sel, unquote('&'), comma);

  #{$sel} {
    counter-reset: #{$counter};

    > #{$numbered-element} {
      &:before {
        counter-increment: #{$counter};
        content: if($nested-parent, counters(#{$counter}, "#{$sep} ") "#{$sep} ", counter(#{$counter}) "#{$sep} ");
      }
    }
  }
}
